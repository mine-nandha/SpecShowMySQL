// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpecShow.Data;

#nullable disable

namespace SpecShow.Migrations
{
    [DbContext(typeof(SpecShowContext))]
    partial class SpecShowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SpecShow.Models.Favourite", b =>
                {
                    b.Property<int>("FavouritesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MobileID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FavouritesID");

                    b.HasIndex("MobileID");

                    b.HasIndex("UserID");

                    b.ToTable("Favourite", (string)null);
                });

            modelBuilder.Entity("SpecShow.Models.Mobile", b =>
                {
                    b.Property<int>("MobileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AmazonUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("AntutuScores")
                        .HasColumnType("int");

                    b.Property<string>("AspectRatio")
                        .HasColumnType("longtext");

                    b.Property<string>("BackCameras")
                        .HasColumnType("longtext");

                    b.Property<string>("BatteryCapacity")
                        .HasColumnType("longtext");

                    b.Property<string>("Bluetooth")
                        .HasColumnType("longtext");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext");

                    b.Property<double>("ChargingCapacity")
                        .HasColumnType("double");

                    b.Property<string>("Colors")
                        .HasColumnType("longtext");

                    b.Property<string>("FlipkartUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("FrontCamera")
                        .HasColumnType("longtext");

                    b.Property<string>("GPU")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Material")
                        .HasColumnType("longtext");

                    b.Property<string>("MobileName")
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<string>("Nanometer")
                        .HasColumnType("longtext");

                    b.Property<string>("OS")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherFeatures")
                        .HasColumnType("longtext");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Processor")
                        .HasColumnType("longtext");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResistanceCertificate")
                        .HasColumnType("longtext");

                    b.Property<string>("Resolution")
                        .HasColumnType("longtext");

                    b.Property<string>("ScreenSize")
                        .HasColumnType("longtext");

                    b.Property<string>("ScreenType")
                        .HasColumnType("longtext");

                    b.Property<string>("Sensors")
                        .HasColumnType("longtext");

                    b.Property<string>("Sim")
                        .HasColumnType("longtext");

                    b.Property<string>("Variants")
                        .HasColumnType("longtext");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("MobileID");

                    b.ToTable("Mobile", (string)null);
                });

            modelBuilder.Entity("SpecShow.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SpecShow.Models.Favourite", b =>
                {
                    b.HasOne("SpecShow.Models.Mobile", "Mobile")
                        .WithMany()
                        .HasForeignKey("MobileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpecShow.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mobile");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
